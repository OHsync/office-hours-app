name: CI/CD Pipeline

on:
  push:
    branches: [ production ]
  pull_request:
    branches: [ production ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Create backend env file
      run: |
        {
          echo "NODE_ENV=production"
          echo "PORT=8080"
          echo "HOST=localhost"
          echo "CORS_ORIGIN=http://localhost:*"
          echo "COMMON_RATE_LIMIT_WINDOW_MS=240"
          echo "COMMON_RATE_LIMIT_MAX_REQUESTS=60"
          echo "MYSQL_USER=${{ secrets.MYSQL_USER }}"
          echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}"
          echo "MYSQL_HOST=${{ secrets.MYSQL_HOST }}"
          echo "MYSQL_PORT=${{ secrets.MYSQL_PORT }}"
          echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}"
          echo "CLERK_PUBLISHABLE_KEY=${{ secrets.CLERK_PUBLISHABLE_KEY }}"
          echo "CLERK_SECRET_KEY=${{ secrets.CLERK_SECRET_KEY }}"
        } > apps/backend/.env.prod
    
    - name: Create frontend env file
      run: |
        {
          echo "VITE_CLERK_PUBLISHABLE_KEY=${{ secrets.CLERK_PUBLISHABLE_KEY }}"
        } > apps/frontend/.env.prod
    
    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ghcr.io/the-office/main-service
        tags: |
          type=sha,prefix=
          type=ref,event=branch
          type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'production') }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ghcr.io/the-office/main-service:latest
          ghcr.io/the-office/main-service:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    # - name: Run Trivy vulnerability scanner
    #   uses: aquasecurity/trivy-action@master
    #   with:
    #     image-ref: 'ghcr.io/the-office/main-service:latest'
    #     format: 'table'
    #     exit-code: '1'
    #     ignore-unfixed: true
    #     severity: 'CRITICAL,HIGH'

    - name: Install SSH key
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
    
    - name: Add known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts
        
    - name: Deploy to production
      if: github.ref == 'refs/heads/production'
      env:
        DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
        DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
      run: |
        scp -r deploy/ $DEPLOY_USER@$DEPLOY_HOST:~/
        ssh $DEPLOY_USER@$DEPLOY_HOST "
          # Install Docker if not present
          if ! command -v docker &> /dev/null; then
            sudo yum update -y
            sudo yum install -y docker
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker ${{ secrets.DEPLOY_USER }}
            newgrp docker
          fi
          if ! command -v docker-compose &> /dev/null; then
            sudo curl -L "https://github.com/docker/compose/releases/download/v2.30.3/docker-compose-$(uname -s)-$(uname -m)"  -o /usr/local/bin/docker-compose
            sudo mv /usr/local/bin/docker-compose /usr/bin/docker-compose
            sudo chmod +x /usr/bin/docker-compose 
          fi
          
          cd deploy
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          docker compose pull && docker compose up -d"
name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ production ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Create backend env file
      run: |
        {
          echo "NODE_ENV=production"
          echo "PORT=8080"
          echo "CORS_ORIGIN=http://localhost:4173"
          echo "COMMON_RATE_LIMIT_WINDOW_MS=240"
          echo "COMMON_RATE_LIMIT_MAX_REQUESTS=60"
          echo "MYSQL_USER=${{ secrets.MYSQL_USER }}"
          echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}"
          echo "MYSQL_HOST=${{ secrets.MYSQL_HOST }}"
          echo "MYSQL_PORT=${{ secrets.MYSQL_PORT }}"
          echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}"
          echo "CLERK_PUBLISHABLE_KEY=${{ secrets.CLERK_PUBLISHABLE_KEY }}"
          echo "CLERK_SECRET_KEY=${{ secrets.CLERK_SECRET_KEY }}"
        } > apps/backend/.env.production
    
    - name: Create frontend env file
      run: |
        {
          echo "VITE_CLERK_PUBLISHABLE_KEY=${{ secrets.CLERK_PUBLISHABLE_KEY }}"
          echo "VITE_API_URL=https://ohsync.me/api"
        } > apps/frontend/.env.production
    
    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ghcr.io/synchrohnize/main-service
        tags: |
          type=sha,prefix=
          type=ref,event=branch
          type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'production') }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ghcr.io/synchrohnize/main-service:latest
          ghcr.io/synchrohnize/main-service:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max